{"ast":null,"code":"var _jsxFileName = \"I:\\\\React-Project\\\\Meme Generator\\\\meme-generator\\\\src\\\\components\\\\Meme.js\",\n  _s = $RefreshSig$();\nimport memesData from \"../data.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  /**\r\n   * Challenge: \r\n   * 1. Set up the text inputs to save to\r\n   *    the `topText` and `bottomText` state variables.\r\n   * 2. Replace the hard-coded text on the image with\r\n   *    the text being saved to state.\r\n   */\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState(memesData);\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  function getMemeImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: FormData.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: FormData.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"V+uwGjtJ91F3jtYL2Rf73pCdWjw=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["memesData","React","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","handleChange","event","name","value","target","prevMeme","getMemeImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","children","className","type","placeholder","FormData","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","_c","$RefreshReg$"],"sources":["I:/React-Project/Meme Generator/meme-generator/src/components/Meme.js"],"sourcesContent":["import memesData from \"../data.js\"\r\nimport React from 'react'\r\n\r\nexport default function Meme() {\r\n    /**\r\n     * Challenge: \r\n     * 1. Set up the text inputs to save to\r\n     *    the `topText` and `bottomText` state variables.\r\n     * 2. Replace the hard-coded text on the image with\r\n     *    the text being saved to state.\r\n     */\r\n    \r\n    const [meme, setMeme] = React.useState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n    })\r\n    const [allMemeImages, setAllMemeImages] = React.useState(memesData)\r\n    \r\n    function handleChange(event){\r\n        const {name, value}= event.target\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name] : value\r\n        }))\r\n    }\r\n    \r\n    function getMemeImage() {\r\n        const memesArray = allMemeImages.data.memes\r\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\r\n        const url = memesArray[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage: url\r\n        }))\r\n        \r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Top text\"\r\n                    className=\"form--input\"\r\n                    name= \"topText\"\r\n                    value = {FormData.topText}\r\n                    onChange = {handleChange}\r\n                />\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Bottom text\"\r\n                    className={\"form--input\"}\r\n                    name = \"bottomText\"\r\n                    value = {FormData.bottomText}\r\n                    onChange= {handleChange}\r\n                />\r\n                <button \r\n                    className=\"form--button\"\r\n                    onClick={getMemeImage}\r\n                >\r\n                    Get a new meme image ðŸ–¼\r\n                </button>\r\n            </div>\r\n            <div className=\"meme\">\r\n                <img src={meme.randomImage} className=\"meme--image\" />\r\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n            </div>\r\n        </main>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}