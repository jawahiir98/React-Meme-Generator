{"ast":null,"code":"var _jsxFileName = \"I:\\\\React-Project\\\\Meme Generator\\\\meme-generator\\\\src\\\\components\\\\Meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport memesData from \"../memesData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  /**\r\n   * Challenge: \r\n   * As soon as the Meme component loads the first time,\r\n   * make an API call to \"https://api.imgflip.com/get_memes\".\r\n   * \r\n   * When the data comes in, save just the memes array part\r\n   * of that data to the `allMemes` state\r\n   * \r\n   * Think about if there are any dependencies that, if they\r\n   * changed, you'd want to cause to re-run this function.\r\n   * \r\n   * Hint: for now, don't try to use an async/await function.\r\n   * Instead, use `.then()` blocks to resolve the promises\r\n   * from using `fetch`. We'll learn why after this challenge.\r\n   */\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState(memesData);\n  function getMemeImage() {\n    const memesArray = allMemes.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"yXBoEUziBfnh+jURMJRA5Fo/DiU=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","memesData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","getMemeImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","_c","$RefreshReg$"],"sources":["I:/React-Project/Meme Generator/meme-generator/src/components/Meme.js"],"sourcesContent":["import React from \"react\"\r\nimport memesData from \"../memesData.js\"\r\n\r\nexport default function Meme() {\r\n    /**\r\n     * Challenge: \r\n     * As soon as the Meme component loads the first time,\r\n     * make an API call to \"https://api.imgflip.com/get_memes\".\r\n     * \r\n     * When the data comes in, save just the memes array part\r\n     * of that data to the `allMemes` state\r\n     * \r\n     * Think about if there are any dependencies that, if they\r\n     * changed, you'd want to cause to re-run this function.\r\n     * \r\n     * Hint: for now, don't try to use an async/await function.\r\n     * Instead, use `.then()` blocks to resolve the promises\r\n     * from using `fetch`. We'll learn why after this challenge.\r\n     */\r\n    \r\n    const [meme, setMeme] = React.useState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n    })\r\n    const [allMemes, setAllMemes] = React.useState(memesData)\r\n    \r\n    \r\n    function getMemeImage() {\r\n        const memesArray = allMemes.data.memes\r\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\r\n        const url = memesArray[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage: url\r\n        }))\r\n        \r\n    }\r\n    \r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name]: value\r\n        }))\r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Top text\"\r\n                    className=\"form--input\"\r\n                    name=\"topText\"\r\n                    value={meme.topText}\r\n                    onChange={handleChange}\r\n                />\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Bottom text\"\r\n                    className=\"form--input\"\r\n                    name=\"bottomText\"\r\n                    value={meme.bottomText}\r\n                    onChange={handleChange}\r\n                />\r\n                <button \r\n                    className=\"form--button\"\r\n                    onClick={getMemeImage}\r\n                >\r\n                    Get a new meme image ðŸ–¼\r\n                </button>\r\n            </div>\r\n            <div className=\"meme\">\r\n                <img src={meme.randomImage} className=\"meme--image\" />\r\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n            </div>\r\n        </main>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}